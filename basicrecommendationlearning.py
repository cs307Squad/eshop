# -*- coding: utf-8 -*-
"""BasicRecommendationLearning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10rzAgsRnM45lksAeGHBkIxkTH9CbybC4
"""

pip install turicreate

import pandas as pd
import numpy as np
import time
import turicreate as tc
from sklearn.model_selection import train_test_split

import sys
sys.path.append("..")

# customers  = pd.read_csv('recommend_1.csv')

# transactions = pd.read_csv('trx_data.csv')

# customers.head()

# transactions.head()

s=time.time()

# data = pd.melt(transactions.set_index('customerId')['products'].apply(pd.Series).reset_index(),  id_vars=['customerId'], value_name='products').dropna().drop(['variable'], axis=1).groupby(['customerId', 'products']).agg({'products': 'count'}).rename(columns={'products': 'purchase_count'}).reset_index().rename(columns={'products': 'productId'})

#data.head()

data2 = pd.read_csv('kz.csv')
data2 = data2.iloc[0:131769]

len(data2)

data2.head()

data2 = (data2.groupby(['user_id', 'product_id']).size().reset_index(name='count').drop_duplicates(subset='user_id'))
customers = pd.DataFrame(data2['user_id'].drop_duplicates())
data2.columns = ['customerId', 'productId', 'purchase_count']

customers = pd.DataFrame(customers, columns = ['customerId'])

def create_data_dummy(data):
    data_dummy = data.copy()
    data_dummy['purchase_dummy'] = 1
    return data_dummy
data_dummy = create_data_dummy(data2)
data_dummy

data_dummy.columns = ['customerId', 'productId', 'purchase_count', 'purchase_dummy']

df_matrix = pd.pivot_table(data_dummy, values='purchase_count', index='customerId', columns='productId')
df_matrix.head()



df_matrix_norm = (df_matrix-df_matrix.min())/(df_matrix.max()-df_matrix.min()) # normalizing the data #0's and 1's

d = df_matrix_norm.reset_index() 
d.index.names = ['scaled_purchase_freq'] 
data_norm = pd.melt(d, id_vars=['customerId'], value_name='scaled_purchase_freq').dropna()
print(data_norm.shape)
data_norm.head()

# In this step, we have normalized the their purchase history, from 0â€“1 (with 1 being the most number of purchase for an item and 0 being 0 purchase count for that item).

"""#Training and testing data"""

def split_data(data):

    train, test = train_test_split(data, test_size = .2)
    train_data = tc.SFrame(train)
    test_data = tc.SFrame(test)
    return train_data, test_data

train_data, test_data = split_data(data2)
train_data_dummy, test_data_dummy = split_data(data_dummy)
train_data_norm, test_data_norm = split_data(data_norm)

user_id = 'customerId'
item_id = 'productId'
users_to_recommend = list(customers[user_id])
n_rec = 10 # number of items to recommend
n_display = 30 # to display the first few rows in an output dataset

"""Baseline Model"""

def model(train_data, name, user_id, item_id, target, users_to_recommend, n_rec, n_display): #we are using the tc model to calculate the similarity and popularity
    if name == 'popularity':
        model = tc.popularity_recommender.create(train_data, 
                                                    user_id=user_id, 
                                                    item_id=item_id, 
                                                    target=target)
    elif name == 'cosine':
        model = tc.item_similarity_recommender.create(train_data, 
                                                    user_id=user_id, 
                                                    item_id=item_id, 
                                                    target=target, 
                                                    similarity_type='cosine')
    elif name == 'pearson':
        model = tc.item_similarity_recommender.create(train_data, 
                                                    user_id=user_id, 
                                                    item_id=item_id, 
                                                    target=target, 
                                                    similarity_type='pearson')
        
    recom = model.recommend(users=users_to_recommend, k=n_rec)
    recom.print_rows(n_display)
    return model

name = 'cosine'
target = 'purchase_count'
train_data['customerId'] = train_data['customerId'].astype(int)
cos = model(train_data, name, user_id, item_id, target, users_to_recommend, n_rec, n_display)